{"version":3,"file":"asciimath2tex.umd.js","sources":["../asciimath2tex.js"],"sourcesContent":["export default class AsciiMathParser {\n    constructor() {\n        this.decimalsign = '\\\\.';\n\n        this.setup_symbols();\n        this.sort_symbols();\n    }\n\n    setup_symbols() {\n        this.greek_letters = ['alpha', 'beta', 'gamma', 'Gamma', 'delta', 'Delta', 'epsilon', 'varepsilon', 'zeta', 'eta', 'theta', 'Theta', 'vartheta', 'iota', 'kappa', 'lambda', 'Lambda', 'mu', 'nu', 'xi', 'Xi', 'pi', 'Pi', 'rho', 'sigma', 'Sigma', 'tau', 'upsilon', 'phi', 'Phi', 'varphi', 'chi', 'psi', 'Psi', 'omega', 'Omega'];\n\n        this.relations = [\n            {\"asciimath\":\":=\",\"tex\":\":=\"},\n            {\"asciimath\":\":|:\",\"tex\":\"\\\\|\"},\n            {\"asciimath\":\"=>\",\"tex\":\"\\\\Rightarrow\"},\n            {\"asciimath\":\"approx\",\"tex\":\"\\\\approx\"},\n            {\"asciimath\":\"~~\",\"tex\":\"\\\\approx\"},\n            {\"asciimath\":\"cong\",\"tex\":\"\\\\cong\"},\n            {\"asciimath\":\"~=\",\"tex\":\"\\\\cong\"},\n            {\"asciimath\":\"equiv\",\"tex\":\"\\\\equiv\"},\n            {\"asciimath\":\"-=\",\"tex\":\"\\\\equiv\"},\n            {\"asciimath\":\"exists\",\"tex\":\"\\\\exists\"},\n            {\"asciimath\":\"EE\",\"tex\":\"\\\\exists\"},\n            {\"asciimath\":\"forall\",\"tex\":\"\\\\forall\"},\n            {\"asciimath\":\"AA\",\"tex\":\"\\\\forall\"},\n            {\"asciimath\":\">=\",\"tex\":\"\\\\ge\"},\n            {\"asciimath\":\"ge\",\"tex\":\"\\\\ge\"},\n            {\"asciimath\":\"gt=\",\"tex\":\"\\\\geq\"},\n            {\"asciimath\":\"geq\",\"tex\":\"\\\\geq\"},\n            {\"asciimath\":\"gt\",\"tex\":\"\\\\gt\"},\n            {\"asciimath\":\"in\",\"tex\":\"\\\\in\"},\n            {\"asciimath\":\"<=\",\"tex\":\"\\\\le\"},\n            {\"asciimath\":\"le\",\"tex\":\"\\\\le\"},\n            {\"asciimath\":\"lt=\",\"tex\":\"\\\\leq\"},\n            {\"asciimath\":\"leq\",\"tex\":\"\\\\leq\"},\n            {\"asciimath\":\"lt\",\"tex\":\"\\\\lt\"},\n            {\"asciimath\":\"models\",\"tex\":\"\\\\models\"},\n            {\"asciimath\":\"|==\",\"tex\":\"\\\\models\"},\n            {\"asciimath\":\"!=\",\"tex\":\"\\\\ne\"},\n            {\"asciimath\":\"ne\",\"tex\":\"\\\\ne\"},\n            {\"asciimath\":\"notin\",\"tex\":\"\\\\notin\"},\n            {\"asciimath\":\"!in\",\"tex\":\"\\\\notin\"},\n            {\"asciimath\":\"prec\",\"tex\":\"\\\\prec\"},\n            {\"asciimath\":\"-lt\",\"tex\":\"\\\\prec\"},\n            {\"asciimath\":\"-<\",\"tex\":\"\\\\prec\"},\n            {\"asciimath\":\"preceq\",\"tex\":\"\\\\preceq\"},\n            {\"asciimath\":\"-<=\",\"tex\":\"\\\\preceq\"},\n            {\"asciimath\":\"propto\",\"tex\":\"\\\\propto\"},\n            {\"asciimath\":\"prop\",\"tex\":\"\\\\propto\"},\n            {\"asciimath\":\"subset\",\"tex\":\"\\\\subset\"},\n            {\"asciimath\":\"sub\",\"tex\":\"\\\\subset\"},\n            {\"asciimath\":\"subseteq\",\"tex\":\"\\\\subseteq\"},\n            {\"asciimath\":\"sube\",\"tex\":\"\\\\subseteq\"},\n            {\"asciimath\":\"succ\",\"tex\":\"\\\\succ\"},\n            {\"asciimath\":\">-\",\"tex\":\"\\\\succ\"},\n            {\"asciimath\":\"succeq\",\"tex\":\"\\\\succeq\"},\n            {\"asciimath\":\">-=\",\"tex\":\"\\\\succeq\"},\n            {\"asciimath\":\"supset\",\"tex\":\"\\\\supset\"},\n            {\"asciimath\":\"sup\",\"tex\":\"\\\\supset\"},\n            {\"asciimath\":\"supseteq\",\"tex\":\"\\\\supseteq\"},\n            {\"asciimath\":\"supe\",\"tex\":\"\\\\supseteq\"},\n            {\"asciimath\":\"vdash\",\"tex\":\"\\\\vdash\"},\n            {\"asciimath\":\"|--\",\"tex\":\"\\\\vdash\"},\n        ]\n\n        this.constants = [\n            {\"asciimath\":\"dt\",\"tex\":\"dt\"},\n            {\"asciimath\":\"dx\",\"tex\":\"dx\"},\n            {\"asciimath\":\"dy\",\"tex\":\"dy\"},\n            {\"asciimath\":\"dz\",\"tex\":\"dz\"},\n            {\"asciimath\":\"prime\",\"tex\":\"'\"},\n            {\"asciimath\":\"implies\",\"tex\":\"\\\\implies\"},\n            {\"asciimath\":\"epsi\",\"tex\":\"\\\\epsilon\"},\n            {\"asciimath\":\"leftrightarrow\",\"tex\":\"\\\\leftrightarrow\"},\n            {\"asciimath\":\"Leftrightarrow\",\"tex\":\"\\\\Leftrightarrow\"},\n            {\"asciimath\":\"rightarrow\",\"tex\":\"\\\\rightarrow\"},\n            {\"asciimath\":\"Rightarrow\",\"tex\":\"\\\\Rightarrow\"},\n            {\"asciimath\":\"backslash\",\"tex\":\"\\\\backslash\"},\n            {\"asciimath\":\"leftarrow\",\"tex\":\"\\\\leftarrow\"},\n            {\"asciimath\":\"Leftarrow\",\"tex\":\"\\\\Leftarrow\"},\n            {\"asciimath\":\"setminus\",\"tex\":\"\\\\setminus\"},\n            {\"asciimath\":\"bigwedge\",\"tex\":\"\\\\bigwedge\"},\n            {\"asciimath\":\"diamond\",\"tex\":\"\\\\diamond\"},\n            {\"asciimath\":\"bowtie\",\"tex\":\"\\\\bowtie\"},\n            {\"asciimath\":\"bigvee\",\"tex\":\"\\\\bigvee\"},\n            {\"asciimath\":\"bigcap\",\"tex\":\"\\\\bigcap\"},\n            {\"asciimath\":\"bigcup\",\"tex\":\"\\\\bigcup\"},\n            {\"asciimath\":\"square\",\"tex\":\"\\\\square\"},\n            {\"asciimath\":\"lamda\",\"tex\":\"\\\\lambda\"},\n            {\"asciimath\":\"Lamda\",\"tex\":\"\\\\Lambda\"},\n            {\"asciimath\":\"aleph\",\"tex\":\"\\\\aleph\"},\n            {\"asciimath\":\"angle\",\"tex\":\"\\\\angle\"},\n            {\"asciimath\":\"frown\",\"tex\":\"\\\\frown\"},\n            {\"asciimath\":\"qquad\",\"tex\":\"\\\\qquad\"},\n            {\"asciimath\":\"cdots\",\"tex\":\"\\\\cdots\"},\n            {\"asciimath\":\"vdots\",\"tex\":\"\\\\vdots\"},\n            {\"asciimath\":\"ddots\",\"tex\":\"\\\\ddots\"},\n            {\"asciimath\":\"cdot\",\"tex\":\"\\\\cdot\"},\n            {\"asciimath\":\"star\",\"tex\":\"\\\\star\"},\n            {\"asciimath\":\"|><|\",\"tex\":\"\\\\bowtie\"},\n            {\"asciimath\":\"circ\",\"tex\":\"\\\\circ\"},\n            {\"asciimath\":\"oint\",\"tex\":\"\\\\oint\"},\n            {\"asciimath\":\"grad\",\"tex\":\"\\\\nabla\"},\n            {\"asciimath\":\"quad\",\"tex\":\"\\\\quad\"},\n            {\"asciimath\":\"uarr\",\"tex\":\"\\\\uparrow\"},\n            {\"asciimath\":\"darr\",\"tex\":\"\\\\downarrow\"},\n            {\"asciimath\":\"downarrow\",\"tex\":\"\\\\downarrow\"},\n            {\"asciimath\":\"rarr\",\"tex\":\"\\\\rightarrow\"},\n            {\"asciimath\":\">->>\",\"tex\":\"\\\\twoheadrightarrowtail\"},\n            {\"asciimath\":\"larr\",\"tex\":\"\\\\leftarrow\"},\n            {\"asciimath\":\"harr\",\"tex\":\"\\\\leftrightarrow\"},\n            {\"asciimath\":\"rArr\",\"tex\":\"\\\\Rightarrow\"},\n            {\"asciimath\":\"lArr\",\"tex\":\"\\\\Leftarrow\"},\n            {\"asciimath\":\"hArr\",\"tex\":\"\\\\Leftrightarrow\"},\n            {\"asciimath\":\"ast\",\"tex\":\"\\\\ast\"},\n            {\"asciimath\":\"***\",\"tex\":\"\\\\star\"},\n            {\"asciimath\":\"|><\",\"tex\":\"\\\\ltimes\"},\n            {\"asciimath\":\"><|\",\"tex\":\"\\\\rtimes\"},\n            {\"asciimath\":\"^^^\",\"tex\":\"\\\\bigwedge\"},\n            {\"asciimath\":\"vvv\",\"tex\":\"\\\\bigvee\"},\n            {\"asciimath\":\"cap\",\"tex\":\"\\\\cap\"},\n            {\"asciimath\":\"nnn\",\"tex\":\"\\\\bigcap\"},\n            {\"asciimath\":\"cup\",\"tex\":\"\\\\cup\"},\n            {\"asciimath\":\"uuu\",\"tex\":\"\\\\bigcup\"},\n            {\"asciimath\":\"not\",\"tex\":\"\\\\neg\"},\n            {\"asciimath\":\"<=>\",\"tex\":\"\\\\Leftrightarrow\"},\n            {\"asciimath\":\"_|_\",\"tex\":\"\\\\bot\"},\n            {\"asciimath\":\"bot\",\"tex\":\"\\\\bot\"},\n            {\"asciimath\":\"int\",\"tex\":\"\\\\int\"},\n            {\"asciimath\":\"del\",\"tex\":\"\\\\partial\"},\n            {\"asciimath\":\"...\",\"tex\":\"\\\\ldots\"},\n            {\"asciimath\":\"/_\\\\\",\"tex\":\"\\\\triangle\"},\n            {\"asciimath\":\"|__\",\"tex\":\"\\\\lfloor\"},\n            {\"asciimath\":\"__|\",\"tex\":\"\\\\rfloor\"},\n            {\"asciimath\":\"dim\",\"tex\":\"\\\\dim\"},\n            {\"asciimath\":\"mod\",\"tex\":\"\\\\operatorname{mod}\"},\n            {\"asciimath\":\"lub\",\"tex\":\"\\\\operatorname{lub}\"},\n            {\"asciimath\":\"glb\",\"tex\":\"\\\\operatorname{glb}\"},\n            {\"asciimath\":\">->\",\"tex\":\"\\\\rightarrowtail\"},\n            {\"asciimath\":\"->>\",\"tex\":\"\\\\twoheadrightarrow\"},\n            {\"asciimath\":\"|->\",\"tex\":\"\\\\mapsto\"},\n            {\"asciimath\":\"lim\",\"tex\":\"\\\\lim\"},\n            {\"asciimath\":\"Lim\",\"tex\":\"\\\\operatorname{Lim}\"},\n            {\"asciimath\":\"and\",\"tex\":\"\\\\quad\\\\text{and}\\\\quad\"},\n            {\"asciimath\":\"**\",\"tex\":\"\\\\ast\"},\n            {\"asciimath\":\"//\",\"tex\":\"/\"},\n            {\"asciimath\":\"\\\\\",\"tex\":\"\\\\,\"},\n            {\"asciimath\":\"\\\\\\\\\",\"tex\":\"\\\\backslash\"},\n            {\"asciimath\":\"xx\",\"tex\":\"\\\\times\"},\n            {\"asciimath\":\"-:\",\"tex\":\"\\\\div\"},\n            {\"asciimath\":\"o+\",\"tex\":\"\\\\oplus\"},\n            {\"asciimath\":\"ox\",\"tex\":\"\\\\otimes\"},\n            {\"asciimath\":\"o.\",\"tex\":\"\\\\odot\"},\n            {\"asciimath\":\"^\",\"tex\":\"\\\\hat{}\"},\n            {\"asciimath\":\"_\",\"tex\":\"\\\\_\"},\n            {\"asciimath\":\"^^\",\"tex\":\"\\\\wedge\"},\n            {\"asciimath\":\"vv\",\"tex\":\"\\\\vee\"},\n            {\"asciimath\":\"nn\",\"tex\":\"\\\\cap\"},\n            {\"asciimath\":\"uu\",\"tex\":\"\\\\cup\"},\n            {\"asciimath\":\"TT\",\"tex\":\"\\\\top\"},\n            {\"asciimath\":\"+-\",\"tex\":\"\\\\pm\"},\n            {\"asciimath\":\"O/\",\"tex\":\"\\\\emptyset\"},\n            {\"asciimath\":\"oo\",\"tex\":\"\\\\infty\"},\n            {\"asciimath\":\":.\",\"tex\":\"\\\\therefore\"},\n            {\"asciimath\":\":'\",\"tex\":\"\\\\because\"},\n            {\"asciimath\":\"/_\",\"tex\":\"\\\\angle\"},\n            {\"asciimath\":\"|~\",\"tex\":\"\\\\lceil\"},\n            {\"asciimath\":\"~|\",\"tex\":\"\\\\rceil\"},\n            {\"asciimath\":\"CC\",\"tex\":\"\\\\mathbb{C}\"},\n            {\"asciimath\":\"NN\",\"tex\":\"\\\\mathbb{N}\"},\n            {\"asciimath\":\"QQ\",\"tex\":\"\\\\mathbb{Q}\"},\n            {\"asciimath\":\"RR\",\"tex\":\"\\\\mathbb{R}\"},\n            {\"asciimath\":\"ZZ\",\"tex\":\"\\\\mathbb{Z}\"},\n            {\"asciimath\":\"->\",\"tex\":\"\\\\to\"},\n            {\"asciimath\":\"or\",\"tex\":\"\\\\quad\\\\text{or}\\\\quad\"},\n            {\"asciimath\":\"if\",\"tex\":\"\\\\quad\\\\text{if}\\\\quad\"},\n            {\"asciimath\":\"iff\", \"tex\":\"\\\\iff\"},\n            {\"asciimath\":\"*\",\"tex\":\"\\\\cdot\"},\n            {\"asciimath\":\"@\",\"tex\":\"\\\\circ\"},\n            {\"asciimath\":\"%\",\"tex\":\"\\\\%\"},\n            {\"asciimath\":\"boxempty\",\"tex\":\"\\\\square\"},\n            {\"asciimath\":\"lambda\",\"tex\":\"\\\\lambda\"},\n            {\"asciimath\":\"Lambda\",\"tex\":\"\\\\Lambda\"},\n            {\"asciimath\":\"nabla\",\"tex\":\"\\\\nabla\"},\n            {\"asciimath\":\"uparrow\",\"tex\":\"\\\\uparrow\"},\n            {\"asciimath\":\"downarrow\",\"tex\":\"\\\\downarrow\"},\n            {\"asciimath\":\"twoheadrightarrowtail\",\"tex\":\"\\\\twoheadrightarrowtail\"},\n            {\"asciimath\":\"ltimes\",\"tex\":\"\\\\ltimes\"},\n            {\"asciimath\":\"rtimes\",\"tex\":\"\\\\rtimes\"},\n            {\"asciimath\":\"neg\",\"tex\":\"\\\\neg\"},\n            {\"asciimath\":\"partial\",\"tex\":\"\\\\partial\"},\n            {\"asciimath\":\"ldots\",\"tex\":\"\\\\ldots\"},\n            {\"asciimath\":\"triangle\",\"tex\":\"\\\\triangle\"},\n            {\"asciimath\":\"lfloor\",\"tex\":\"\\\\lfloor\"},\n            {\"asciimath\":\"rfloor\",\"tex\":\"\\\\rfloor\"},\n            {\"asciimath\":\"rightarrowtail\",\"tex\":\"\\\\rightarrowtail\"},\n            {\"asciimath\":\"twoheadrightarrow\",\"tex\":\"\\\\twoheadrightarrow\"},\n            {\"asciimath\":\"mapsto\",\"tex\":\"\\\\mapsto\"},\n            {\"asciimath\":\"times\",\"tex\":\"\\\\times\"},\n            {\"asciimath\":\"div\",\"tex\":\"\\\\div\"},\n            {\"asciimath\":\"divide\",\"tex\":\"\\\\div\"},\n            {\"asciimath\":\"oplus\",\"tex\":\"\\\\oplus\"},\n            {\"asciimath\":\"otimes\",\"tex\":\"\\\\otimes\"},\n            {\"asciimath\":\"odot\",\"tex\":\"\\\\odot\"},\n            {\"asciimath\":\"wedge\",\"tex\":\"\\\\wedge\"},\n            {\"asciimath\":\"vee\",\"tex\":\"\\\\vee\"},\n            {\"asciimath\":\"top\",\"tex\":\"\\\\top\"},\n            {\"asciimath\":\"pm\",\"tex\":\"\\\\pm\"},\n            {\"asciimath\":\"emptyset\",\"tex\":\"\\\\emptyset\"},\n            {\"asciimath\":\"infty\",\"tex\":\"\\\\infty\"},\n            {\"asciimath\":\"therefore\",\"tex\":\"\\\\therefore\"},\n            {\"asciimath\":\"because\",\"tex\":\"\\\\because\"},\n            {\"asciimath\":\"lceil\",\"tex\":\"\\\\lceil\"},\n            {\"asciimath\":\"rceil\",\"tex\":\"\\\\rceil\"},\n            {\"asciimath\":\"to\",\"tex\":\"\\\\to\"},\n            {\"asciimath\":\"langle\",\"tex\":\"\\\\langle\"},\n            {\"asciimath\":\"lceiling\",\"tex\":\"\\\\lceil\"},\n            {\"asciimath\":\"rceiling\",\"tex\":\"\\\\rceil\"},\n            {\"asciimath\":\"max\",\"tex\":\"\\\\max\"},\n            {\"asciimath\":\"min\",\"tex\":\"\\\\min\"},\n            {\"asciimath\":\"prod\",\"tex\":\"\\\\prod\"},\n            {\"asciimath\":\"sum\",\"tex\":\"\\\\sum\"},\n        ];\n        this.constants = this.constants.concat(this.relations);\n        \n        this.left_brackets = [\n            {asciimath: 'langle', tex: '\\\\langle'},\n            {asciimath: '(:', tex: '\\\\langle'},\n            {asciimath: '<<', tex: '\\\\langle'},\n            {asciimath: '{:', tex: '.'},\n            {asciimath: '(', tex: '('},\n            {asciimath: '[', tex: '['},\n            {asciimath: '{', tex: '\\\\lbrace'},\n            {asciimath: 'lbrace', tex: '\\\\lbrace'},\n        ];\n        this.right_brackets = [\n            {asciimath: 'rangle', tex: '\\\\rangle'},\n            {asciimath: ':)', tex: '\\\\rangle'},\n            {asciimath: '>>', tex: '\\\\rangle'},\n            {asciimath: ':}', tex: '.', free_tex: ':\\\\}'},\n            {asciimath: ')', tex: ')'},\n            {asciimath: ']', tex: ']'},\n            {asciimath: '}', tex: '\\\\rbrace'},\n            {asciimath: 'rbrace', tex: '\\\\rbrace'},\n        ];\n        this.leftright_brackets = [\n            {asciimath: '|', left_tex: '\\\\lvert', right_tex: '\\\\rvert', free_tex: '|'},\n        ];\n        \n        this.unary_symbols = [\n            {asciimath: \"sqrt\", tex: \"\\\\sqrt\"},\n            {asciimath: \"f\", tex:\"f\", func:true},\n            {asciimath: \"g\", tex:\"g\", func:true},\n            {asciimath: \"sin\", tex:\"\\\\sin\", func:true},\n            {asciimath: \"cos\", tex:\"\\\\cos\", func:true},\n            {asciimath: \"tan\", tex:\"\\\\tan\", func:true},\n            {asciimath: \"arcsin\", tex:\"\\\\arcsin\", func:true},\n            {asciimath: \"arccos\", tex:\"\\\\arccos\", func:true},\n            {asciimath: \"arctan\", tex:\"\\\\arctan\", func:true},\n            {asciimath: \"sinh\", tex:\"\\\\sinh\", func:true},\n            {asciimath: \"cosh\", tex:\"\\\\cosh\", func:true},\n            {asciimath: \"tanh\", tex:\"\\\\tanh\", func:true},\n            {asciimath: \"cot\", tex:\"\\\\cot\", func:true},\n            {asciimath: \"coth\", tex:\"\\\\coth\", func:true},\n            {asciimath: \"sech\", tex:\"\\\\operatorname{sech}\", func:true},\n            {asciimath: \"csch\", tex:\"\\\\operatorname{csch}\", func:true},\n            {asciimath: \"sec\", tex:\"\\\\sec\", func:true},\n            {asciimath: \"csc\", tex:\"\\\\csc\", func:true},\n            {asciimath: \"log\", tex:\"\\\\log\", func:true},\n            {asciimath: \"ln\", tex:\"\\\\ln\", func:true},\n            {asciimath: \"abs\", rewriteleftright:[\"|\",\"|\"]},\n            {asciimath: \"norm\", rewriteleftright:[\"\\\\|\",\"\\\\|\"]},\n            {asciimath: \"floor\", rewriteleftright:[\"\\\\lfloor\",\"\\\\rfloor\"]},\n            {asciimath: \"ceil\", rewriteleftright:[\"\\\\lceil\",\"\\\\rceil\"]},\n            {asciimath: \"Sin\", tex:\"\\\\Sin\", func:true},\n            {asciimath: \"Cos\", tex:\"\\\\Cos\", func:true},\n            {asciimath: \"Tan\", tex:\"\\\\Tan\", func:true},\n            {asciimath: \"Arcsin\", tex:\"\\\\Arcsin\", func:true},\n            {asciimath: \"Arccos\", tex:\"\\\\Arccos\", func:true},\n            {asciimath: \"Arctan\", tex:\"\\\\Arctan\", func:true},\n            {asciimath: \"Sinh\", tex:\"\\\\Sinh\", func:true},\n            {asciimath: \"Cosh\", tex:\"\\\\Cosh\", func:true},\n            {asciimath: \"Tanh\", tex:\"\\\\Tanh\", func:true},\n            {asciimath: \"Cot\", tex:\"\\\\Cot\", func:true},\n            {asciimath: \"Sec\", tex:\"\\\\Sec\", func:true},\n            {asciimath: \"Csc\", tex:\"\\\\Csc\", func:true},\n            {asciimath: \"Log\", tex:\"\\\\Log\", func:true},\n            {asciimath: \"Ln\", tex:\"\\\\Ln\", func:true},\n            {asciimath: \"Abs\", tex:\"\\\\Abs\", rewriteleftright:[\"|\",\"|\"]},\n            {asciimath: \"det\", tex:\"\\\\det\", func:true},\n            {asciimath: \"exp\", tex:\"\\\\exp\", func:true},\n            {asciimath: \"gcd\", tex:\"\\\\gcd\", func:true},\n            {asciimath:\"lcm\", tex:\"\\\\operatorname{lcm}\", func:true},\n            {asciimath: \"cancel\", tex:\"\\\\cancel\"},\n            {asciimath: \"Sqrt\", tex:\"\\\\Sqrt\"},\n            {asciimath: \"hat\", tex:\"\\\\hat\", acc:true},\n            {asciimath:\"bar\", tex:\"\\\\overline\", acc:true},\n            {asciimath:\"overline\", tex:\"\\\\overline\", acc:true},\n            {asciimath: \"vec\", tex:\"\\\\vec\", acc:true},\n            {asciimath: \"tilde\", tex:\"\\\\tilde\", acc:true},\n            {asciimath: \"dot\", tex:\"\\\\dot\", acc:true},\n            {asciimath: \"ddot\", tex:\"\\\\ddot\", acc:true},\n            {asciimath:\"ul\", tex:\"\\\\underline\", acc:true},\n            {asciimath:\"underline\", tex:\"\\\\underline\", acc:true},\n            {asciimath:\"ubrace\", tex:\"\\\\underbrace\", acc:true},\n            {asciimath:\"underbrace\", tex:\"\\\\underbrace\", acc:true},\n            {asciimath:\"obrace\", tex:\"\\\\overbrace\", acc:true},\n            {asciimath:\"overbrace\", tex:\"\\\\overbrace\", acc:true},\n            {asciimath:\"bb\", atname:\"mathvariant\", atval:\"bold\", tex:\"\\\\mathbf\"},\n            {asciimath: \"mathbf\", atname:\"mathvariant\", atval:\"bold\", tex:\"mathbf\"},\n            {asciimath:\"sf\", atname:\"mathvariant\", atval:\"sans-serif\", tex:\"\\\\mathsf\"},\n            {asciimath: \"mathsf\", atname:\"mathvariant\", atval:\"sans-serif\", tex:\"mathsf\"},\n            {asciimath:\"bbb\", atname:\"mathvariant\", atval:\"double-struck\", tex:\"\\\\mathbb\"},\n            {asciimath: \"mathbb\", atname:\"mathvariant\", atval:\"double-struck\", tex:\"\\\\mathbb\"},\n            {asciimath:\"cc\", atname:\"mathvariant\", atval:\"script\", tex:\"\\\\mathcal\"},\n            {asciimath: \"mathcal\", atname:\"mathvariant\", atval:\"script\", tex:\"\\\\mathcal\"},\n            {asciimath:\"tt\", atname:\"mathvariant\", atval:\"monospace\", tex:\"\\\\mathtt\"},\n            {asciimath: \"mathtt\", atname:\"mathvariant\", atval:\"monospace\", tex:\"\\\\mathtt\"},\n            {asciimath:\"fr\", atname:\"mathvariant\", atval:\"fraktur\", tex:\"\\\\mathfrak\"},\n            {asciimath: \"mathfrak\", atname:\"mathvariant\", atval:\"fraktur\", tex:\"\\\\mathfrak\"},\n        ];\n        \n        this.binary_symbols = [\n            {asciimath: \"root\", tex:\"\\\\sqrt\", option: true},\n            {asciimath: \"frac\",    tex:\"\\\\frac\"},\n            {asciimath: \"stackrel\", tex:\"\\\\stackrel\"},\n            {asciimath: \"overset\", tex:\"\\\\overset\"},\n            {asciimath: \"underset\", tex:\"\\\\underset\"},\n            {asciimath:\"color\", tex: \"\\\\color\", rawfirst: true},\n        ]\n        \n        this.non_constant_symbols = ['_','^','/'];\n        \n    }\n\n    sort_symbols() {\n        const by_asciimath = (a,b)=>{a=a.asciimath.length,b=b.asciimath.length; return a>b ? -1 : a<b ? 1 : 0};\n        this.constants.sort(by_asciimath);\n        this.relations.sort(by_asciimath);\n        this.left_brackets.sort(by_asciimath);\n        this.right_brackets.sort(by_asciimath);\n        this.leftright_brackets.sort(by_asciimath);\n        this.unary_symbols.sort(by_asciimath);\n        this.binary_symbols.sort(by_asciimath);\n    }\n    \n    error(message, pos) {\n        const neighbourhood = this.source(pos).slice(0,5);\n        throw(new Error(`Error at character ${pos} near \"${neighbourhood}\": ${message}`));\n    }\n    \n    literal(token) {\n        if(token) {\n            return {tex: token.token, pos: token.pos, end: token.end, ttype: 'literal'};\n        }\n    }\n\n    longest(matches) {\n        matches = matches.filter(x=>!!x);\n        matches.sort((x,y)=>{\n            x=x.end;\n            y=y.end;\n            return x>y ? -1 : x<y ? 1 : 0;\n        });\n        return matches[0];\n    }\n\n    escape_text(str) {\n        return str\n            .replace(/\\{/g,'\\\\{')\n            .replace(/\\}/g,'\\\\}')\n        ;\n    }\n    \n    input(str) {\n        this._source = str;\n        this.brackets = [];\n    }\n    \n    source(pos = 0,end) {\n        if(arguments.length>1) {\n            return this._source.slice(pos,end);\n        } else {\n            return this._source.slice(pos);\n        }\n    }\n    \n    eof(pos = 0) {\n        pos = this.strip_space(pos);\n        return pos == this._source.length;\n    }\n\n    unbracket(tok) {\n        if(!tok) {\n            return;\n        }\n        if(!tok.bracket) {\n            return tok;\n        }\n\n        const skip_brackets = ['(',')','[',']','{','}'];\n        const skipleft = skip_brackets.includes(tok.left.asciimath);\n        const skipright = skip_brackets.includes(tok.right.asciimath);\n        const pos = skipleft ? tok.left.end : tok.pos;\n        const end = skipright ? tok.right.pos : tok.end;\n        let left = skipleft ? '' : tok.left.tex;\n        let right = skipright ? '' : tok.right.tex;\n        const middle = tok.middle ? tok.middle.tex : '';\n        if(left || right) {\n            left = left || '.';\n            right = right || '.';\n            return {tex: `\\\\left ${left} ${middle} \\\\right ${right}`, pos: tok.pos, end: tok.end};\n        } else {\n            return {tex: middle, pos: tok.pos, end: tok.end, middle_asciimath: this.source(pos,end)};\n        }\n    }\n    \n    parse(str) {\n        this.input(str);\n        const result = this.consume();\n        return result.tex;\n    }\n\n    consume(pos = 0) {\n        let tex = '';\n        const exprs = [];\n        while(!this.eof(pos)) {\n            let expr = this.expression_list(pos);\n            if(!expr) {\n                const rb = this.right_bracket(pos);\n                if(rb) {\n                    if(rb.def.free_tex) {\n                        rb.tex = rb.def.free_tex;\n                    }\n                    expr = rb;\n\n                }\n                const lr = this.leftright_bracket(pos);\n                if(lr) {\n                    expr = lr;\n                    const ss = this.subsup(lr.end);\n                    if(ss) {\n                        expr = {tex: `${expr.tex}${ss.tex}`, pos: pos, end: ss.end, ttype: 'expression'}\n                    }\n                }\n            }\n            if(expr) {\n                if(tex) {\n                    tex += ' ';\n                }\n                tex += expr.tex;\n                pos = expr.end;\n                exprs.push(expr);\n            } else if(!this.eof(pos)) {\n                const chr = this.source(pos,pos+1);\n                exprs.push({tex: chr, pos: pos, ttype: 'character'});\n                tex += chr;\n                pos += 1;\n            }\n        }\n        return {tex: tex, exprs: exprs};\n    }\n    \n    strip_space(pos = 0) {\n        const osource = this.source(pos);\n        const reduced = osource.replace(/^(\\s|\\\\(?!\\\\))*/,'');\n        return pos + osource.length - reduced.length;\n    }\n    \n    /* Does the given regex match next?\n     */\n    match(re, pos) {\n        pos = this.strip_space(pos);\n        const m = re.exec(this.source(pos));\n        if(m) {\n            const token = m[0];\n            return {token: token, pos: pos, match: m, end: pos+token.length, ttype: 'regex'};\n        }\n    }\n    \n    /* Does the exact given string occur next?\n     */\n    exact(str, pos) {\n        pos = this.strip_space(pos);\n        if(this.source(pos).slice(0, str.length) == str) {\n            return {token: str, pos: pos, end: pos+str.length, ttype: 'exact'};\n        }\n    }\n\n    expression_list(pos = 0) {\n        let expr = this.expression(pos);\n        if(!expr) {\n            return;\n        }\n        let end = expr.end;\n        let tex = expr.tex;\n        let exprs = [expr];\n        while(!this.eof(end)) {\n            const comma = this.exact(\",\",end);\n            if(!comma) {\n                break;\n            }\n            tex += ' ,';\n            end = comma.end;\n            expr = this.expression(end);\n            if(!expr) {\n                break;\n            }\n            tex += ' '+expr.tex;\n            exprs.push(expr);\n            end = expr.end;\n        }\n        return {tex: tex, pos: pos, end: end, exprs: exprs, ttype: 'expression_list'};\n    }\n    \n    // E ::= IE | I/I                       Expression\n    expression(pos = 0) {\n        const negative = this.negative_expression(pos);\n        if(negative) {\n            return negative;\n        }\n        const first = this.intermediate_or_fraction(pos);\n        if(!first) {\n            for(let c of this.non_constant_symbols) {\n                const m = this.exact(c,pos);\n                if(m) {\n                    return {tex: c, pos: pos, end: m.end, ttype: 'constant'};\n                }\n            }\n            return;\n        }\n        if(this.eof(first.end)) {\n            return first;\n        }\n        const second = this.expression(first.end);\n        if(second) {\n            return {tex: first.tex+' '+second.tex, pos: first.pos, end: second.end, ttype: 'expression', exprs: [first,second]};\n        } else {\n            return first;\n        }\n    }\n\n    negative_expression(pos = 0) {\n        const dash = this.exact(\"-\",pos);\n        if(dash && !this.other_constant(pos)) {\n            const expr = this.expression(dash.end);\n            if(expr) {\n                return {tex: `- ${expr.tex}`, pos: pos, end: expr.end, ttype: 'negative_expression', dash: dash, expression: expr}\n            } else {\n                return {tex: '-', pos: pos, end: dash.end, ttype: 'constant'};\n            }\n        }\n    }\n    \n    intermediate_or_fraction(pos = 0) {\n        const first = this.intermediate(pos);\n        if(!first) {\n            return;\n        }\n        let frac = this.match(/^\\/(?!\\/)/,first.end);\n        if(frac) {\n            const second = this.intermediate(frac.end);\n            if(second) {\n                const ufirst = this.unbracket(first);\n                const usecond = this.unbracket(second);\n                return {tex: `\\\\frac{${ufirst.tex}}{${usecond.tex}}`, pos: first.pos, end: second.end, ttype: 'fraction', numerator: ufirst, denominator: usecond};\n            } else {\n                const ufirst = this.unbracket(first);\n                return {tex: `\\\\frac{${ufirst.tex}}{}`, pos: first.pos, end: frac.end, ttype: 'fraction', numerator: ufirst, denominator: null};\n            }\n        } else {\n            return first;\n        }\n    }\n    \n    // I ::= S_S | S^S | S_S^S | S          Intermediate expression\n    intermediate(pos = 0) {\n        const first = this.simple(pos);\n        if(!first) {\n            return;\n        }\n        const ss = this.subsup(first.end);\n        if(ss) {\n            return {tex: `${first.tex}${ss.tex}`, pos:pos, end:ss.end, ttype: 'intermediate', expression: first, subsup: ss};\n        } else {\n            return first;\n        }\n    }\n\n    subsup(pos = 0) {\n        let tex = '';\n        let end = pos;\n        let sub = this.exact('_',pos);\n        let sub_expr, sup_expr;\n        if(sub) {\n            sub_expr = this.unbracket(this.simple(sub.end));\n            if(sub_expr) {\n                tex = `${tex}_{${sub_expr.tex}}`;\n                end = sub_expr.end;\n            } else {\n                tex = `${tex}_{}`;\n                end = sub.end;\n            }\n        }\n        let sup = this.match(/^\\^(?!\\^)/,end);\n        if(sup) {\n            sup_expr = this.unbracket(this.simple(sup.end));\n            if(sup_expr) {\n                tex = `${tex}^{${sup_expr.tex}}`;\n                end = sup_expr.end;\n            } else {\n                tex = `${tex}^{}`;\n                end = sup.end;\n            }\n        }\n        if(sub || sup) {\n            return {tex: tex, pos: pos, end: end, ttype: 'subsup', sub: sub_expr, sup: sup_expr};\n        }\n    }\n\n    // S ::= v | lEr | uS | bSS             Simple expression\n    simple(pos = 0) {\n        return this.longest([this.matrix(pos), this.bracketed_expression(pos), this.binary(pos), this.constant(pos), this.text(pos), this.unary(pos), this.negative_simple(pos)]);\n    }\n\n    negative_simple(pos = 0) {\n        const dash = this.exact(\"-\",pos);\n        if(dash && !this.other_constant(pos)) {\n            const expr = this.simple(dash.end);\n            if(expr) {\n                return {tex: `- ${expr.tex}`, pos: pos, end: expr.end, ttype: 'negative_simple', dash: dash, expr: expr}\n            } else {\n                return {tex: '-', pos: pos, end: dash.end, ttype: 'constant'};\n            }\n        }\n    }\n\n    // matrix: leftbracket \"(\" expr \")\" (\",\" \"(\" expr \")\")* rightbracket \n    // each row must have the same number of elements\n    matrix(pos = 0) {\n        let left = this.left_bracket(pos);\n        let lr = false;\n        if(!left) {\n            left = this.leftright_bracket(pos,'left');\n            if(!left) {\n                return;\n            }\n            lr = true;\n        }\n        const contents = this.matrix_contents(left.end, lr);\n        if(!contents) {\n            return;\n        }\n        const right = lr ? this.leftright_bracket(contents.end, 'right') : this.right_bracket(contents.end);\n        if(!right) {\n            return;\n        }\n        const contents_tex = contents.rows.map(r=>r.tex).join(' \\\\\\\\ ');\n        const matrix_tex = contents.is_array ? `\\\\begin{array}{${contents.column_desc}} ${contents_tex} \\\\end{array}` : `\\\\begin{matrix} ${contents_tex} \\\\end{matrix}`;\n        return {tex: `\\\\left ${left.tex} ${matrix_tex} \\\\right ${right.tex}`, pos: pos, end: right.end, ttype: 'matrix', rows: contents.rows, left: left, right: right};\n    }\n\n    matrix_contents(pos = 0, leftright = false) {\n        let rows = [];\n        let end = pos;\n        let row_length = undefined;\n        let column_desc = undefined;\n        let is_array = false;\n        while(!this.eof(end) && !(leftright ? this.leftright_bracket(end) : this.right_bracket(end))) {\n            if(rows.length) {\n                const comma = this.exact(\",\",end);\n                if(!comma) {\n                    return;\n                }\n                end = comma.end;\n            }\n            const lb = this.match(/^[(\\[]/,end);\n            if(!lb) {\n                return;\n            }\n\n            const cells = [];\n            const columns = [];\n            end = lb.end;\n            while(!this.eof(end)) {\n                if(cells.length) {\n                    const comma = this.exact(\",\",end);\n                    if(!comma) {\n                        break;\n                    }\n                    end = comma.end;\n                }\n                const cell = this.matrix_cell(end);\n                if(!cell) {\n                    break;\n                }\n                if(cell.ttype=='column') {\n                    columns.push('|');\n                    is_array = true;\n                    if(cell.expr!==null) {\n                        columns.push('r');\n                        cells.push(cell.expr);\n                    }\n                } else {\n                    columns.push('r');\n                    cells.push(cell);\n                }\n                end = cell.end;\n            }\n            if(!cells.length) {\n                return;\n            }\n            if(row_length===undefined) {\n                row_length = cells.length;\n            } else if(cells.length!=row_length) {\n                return;\n            }\n            const rb = this.match(/^[)\\]]/,end);\n            if(!rb) {\n                return;\n            }\n            const row_column_desc = columns.join('');\n            if(column_desc===undefined) {\n                column_desc = row_column_desc;\n            } else if(row_column_desc!=column_desc) {\n                return;\n            }\n            rows.push({ttype: 'row', tex: cells.map(c=>c.tex).join(' & '), pos: lb.end, end: end, cells: cells});\n            end = rb.end;\n        }\n        if(row_length===undefined || (row_length<=1 && rows.length<=1)) {\n            return;\n        }\n        return {rows: rows, end: end, column_desc: column_desc, is_array: is_array};\n    }\n\n    matrix_cell(pos = 0) {\n        const lvert = this.exact('|',pos);\n        if(lvert) {\n            const middle = this.expression(lvert.end);\n            if(middle) {\n                const rvert = this.exact('|',middle.end);\n                if(rvert) {\n                    const second = this.expression(rvert.end);\n                    if(second) {\n                        return {tex: `\\\\left \\\\lvert ${middle.tex} \\\\right \\\\rvert ${second.text}`, pos: lvert.pos, end: second.end, ttype: 'expression', exprs: [middle,second]};\n                    }\n                } else {\n                    return {ttype: 'column', expr: middle, pos: lvert.pos, end: middle.end};\n                }\n            } else {\n                return {ttype: 'column', expr: null, pos: lvert.pos, end: lvert.end}\n            }\n        }\n        return this.expression(pos);\n    }\n    \n    bracketed_expression(pos = 0) {\n        const l = this.left_bracket(pos);\n        if(l) {\n            const middle = this.expression_list(l.end);\n            if(middle) {\n                const r = this.right_bracket(middle.end) || this.leftright_bracket(middle.end,'right');\n                if(r) {\n                    return {tex: `\\\\left${l.tex} ${middle.tex} \\\\right ${r.tex}`, pos: pos, end: r.end, bracket: true, left: l, right: r, middle: middle, ttype: 'bracket'};\n                } else if(this.eof(middle.end)) {\n                    return {tex: `\\\\left${l.tex} ${middle.tex} \\\\right.`, pos: pos, end: middle.end, ttype: 'bracket', left: l, right: null, middle: middle};\n                } else {\n                    return {tex: `${l.tex} ${middle.tex}`, pos: pos, end: middle.end, ttype: 'expression', exprs: [l,middle]};\n                }\n            } else {\n                const r = this.right_bracket(l.end) || this.leftright_bracket(l.end,'right');\n                if(r) {\n                    return {tex: `\\\\left ${l.tex} \\\\right ${r.tex}`, pos: pos, end: r.end, bracket: true, left: l, right: r, middle: null, ttype: 'bracket'};\n                } else {\n                    return {tex: l.tex, pos: pos, end: l.end, ttype: 'constant'};\n                }\n            }\n        }\n        if(this.other_constant(pos)) {\n            return;\n        }\n        const left = this.leftright_bracket(pos, 'left');\n        if(left) {\n            const middle = this.expression_list(left.end);\n            if(middle) {\n                const right = this.leftright_bracket(middle.end, 'right') || this.right_bracket(middle.end);\n                if(right) {\n                    return {tex: `\\\\left ${left.tex} ${middle.tex} \\\\right ${right.tex}`, pos: pos, end: right.end, bracket: true, left: left, right: right, middle: middle, ttype: 'bracket'};\n                }\n            }\n        }\n    }\n    \n    // r ::= ) | ] | } | :) | :} | other right brackets\n    right_bracket(pos = 0) {\n        for(let bracket of this.right_brackets) {\n            const m = this.exact(bracket.asciimath,pos);\n            if(m) {\n                return {tex: bracket.tex, pos: pos, end: m.end, asciimath: bracket.asciimath, def: bracket, ttype: 'right_bracket'};\n            }\n        }\n    }\n    \n    // l ::= ( | [ | { | (: | {: | other left brackets\n    left_bracket(pos = 0) {\n        for(let bracket of this.left_brackets) {\n            const m = this.exact(bracket.asciimath,pos);\n            if(m) {\n                return {tex: bracket.tex, pos: pos, end: m.end, asciimath: bracket.asciimath, ttype: 'left_bracket'};\n            }\n        }\n    }\n\n    leftright_bracket(pos = 0,position) {\n        for(let lr of this.leftright_brackets) {\n            const b = this.exact(lr.asciimath, pos);\n            if(b) {\n                return {tex: position=='left' ? lr.left_tex : position=='right' ? lr.right_tex : lr.free_tex, pos: pos, end: b.end, ttype: 'leftright_bracket'};\n            }\n        }\n    }\n\n    text(pos = 0) {\n        const quoted = this.match(/^\"([^\"]*)\"/,pos);\n        if(quoted) {\n            const text = this.escape_text(quoted.match[1]);\n            return {tex: `\\\\text{${text}}`, pos: pos, end: quoted.end, ttype: 'text', text: text};\n        }\n        const textfn = this.match(/^(?:mbox|text)\\s*(\\([^)]*\\)?|\\{[^}]*\\}?|\\[[^\\]]*\\]?)/,pos);\n        if(textfn) {\n            const text = this.escape_text(textfn.match[1].slice(1,textfn.match[1].length-1));\n            return {tex: `\\\\text{${text}}`, pos: pos, end: textfn.end, ttype: 'text', text: text};\n        }\n    }\n\n    // b ::= frac | root | stackrel | other binary symbols\n    binary(pos = 0) {\n        for(let binary of this.binary_symbols) {\n            const m = this.exact(binary.asciimath, pos);\n            const [lb1,rb1] = binary.option ? ['[',']'] : ['{','}'];\n            if(m) {\n                const a = this.unbracket(this.simple(m.end));\n                if(a) {\n                    const atex = binary.rawfirst ? a.middle_asciimath : a.tex;\n                    const b = this.unbracket(this.simple(a.end));\n                    if(b) {\n                        return {tex: `${binary.tex}${lb1}${atex}${rb1}{${b.tex}}`, pos: pos, end: b.end, ttype: 'binary', op: binary, arg1: a, arg2: b};\n                    } else {\n                        return {tex: `${binary.tex}${lb1}${atex}${rb1}{}`, pos: pos, end: a.end, ttype: 'binary', op: binary, arg1: a, arg2: null};\n                    }\n                } else {\n                    return {tex: `${binary.tex}${lb1}${rb1}{}`, pos: pos, end: m.end, ttype: 'binary', op: binary, arg1: null, arg2: null};\n                }\n            }\n        }\n    }\n\n    // u ::= sqrt | text | bb | other unary symbols for font commands\n    unary(pos = 0) {\n        for(let u of this.unary_symbols) {\n            const m = this.exact(u.asciimath, pos);\n            if(m) {\n                const ss = this.subsup(m.end);\n                const sstex = ss ? ss.tex : '';\n                const end = ss ? ss.end : m.end;\n                const barg = this.simple(end);\n                const arg = u.func ? barg : this.unbracket(barg);\n                const argtex = arg && (u.raw ? arg.middle_asciimath : arg.tex);\n                if(u.rewriteleftright) {\n                    const [left,right] = u.rewriteleftright;\n                    if(arg) {\n                        return {tex: `\\\\left ${left} ${argtex} \\\\right ${right} ${sstex}`, pos: pos, end: arg.end, ttype: 'unary', op: m, subsup: ss, arg: arg};\n                    } else {\n                        return {tex: `\\\\left ${left} \\\\right ${right} ${sstex}`, pos: pos, end: m.end, ttype: 'unary', op: m, subsup: ss, arg: null};\n                    }\n                } else {\n                    if(arg) {\n                        return {tex: `${u.tex}${sstex}{${argtex}}`, pos: pos, end: arg.end, ttype: 'unary', op: m, subsup: ss, arg: arg};\n                    } else {\n                        return {tex: `${u.tex}${sstex}{}`, pos: pos, end: m.end, ttype: 'unary', op: m, subsup: ss, arg: null};\n                    }\n                }\n            }\n        }\n    }\n\n    // v ::= [A-Za-z] | greek letters | numbers | other constant symbols\n    constant(pos = 0) {\n        if(this.right_bracket(pos)) {\n            return;\n        }\n        return this.longest([this.other_constant(pos), this.greek(pos), this.name(pos), this.number(pos), this.arbitrary_constant(pos)]);\n    }\n    \n    name(pos = 0) {\n        return this.literal(this.match(/^[A-Za-z]/, pos));\n    }\n    \n    greek(pos = 0) {\n        const re_greek = new RegExp('^('+this.greek_letters.join('|')+')');\n        const m = this.match(re_greek, pos);\n        if(m) {\n            return {tex: '\\\\'+m.token, pos: pos, end: m.end, ttype: 'greek'};\n        }\n    }\n    \n    number(pos = 0) {\n        const re_number = new RegExp('^\\\\d+('+this.decimalsign+'\\\\d+)?');\n        return this.literal(this.match(re_number, pos));\n    }\n\n    other_constant(pos = 0) {\n        for(let sym of this.constants) {\n            let m = this.exact(sym.asciimath, pos);\n            if(m) {\n                return {tex: `${sym.tex}`, pos: m.pos, end: m.end, ttype: 'other_constant'};\n            }\n        }\n        for(let sym of this.relations) {\n            if(!sym.asciimath.match(/^!/)) {\n                let notm = this.exact('!'+sym.asciimath, pos);\n                if(notm) {\n                    return {tex: `\\\\not ${sym.tex}`, pos: notm.pos, end: notm.end, ttype: 'other_constant'};\n                }\n            }\n        }\n    }\n    \n    arbitrary_constant(pos = 0) {\n        if(!this.eof(pos)) {\n            if(this.exact(\",\",pos)) {\n                return;\n            }\n            for(let nc of this.non_constant_symbols.concat(this.left_brackets.map(x=>x.asciimath), this.right_brackets.map(x=>x.asciimath), this.leftright_brackets.map(x=>x.asciimath))) {\n                if(this.exact(nc, pos)) {\n                    return;\n                }\n            }\n            const spos = this.strip_space(pos);\n            const symbol = this.source(spos).slice(0,1);\n            return {tex: symbol, pos: pos, end: spos+1, ttype: 'arbitrary_constant'};\n        }\n    }\n}\n\n"],"names":["AsciiMathParser","constructor","decimalsign","setup_symbols","sort_symbols","greek_letters","relations","constants","this","concat","left_brackets","asciimath","tex","right_brackets","free_tex","leftright_brackets","left_tex","right_tex","unary_symbols","func","rewriteleftright","acc","atname","atval","binary_symbols","option","rawfirst","non_constant_symbols","by_asciimath","a","b","length","sort","error","message","pos","neighbourhood","source","slice","Error","literal","token","end","ttype","longest","matches","filter","x","y","escape_text","str","replace","input","_source","brackets","arguments","eof","strip_space","unbracket","tok","bracket","skip_brackets","skipleft","includes","left","skipright","right","middle","middle_asciimath","parse","consume","exprs","expr","expression_list","rb","right_bracket","def","lr","leftright_bracket","ss","subsup","push","chr","osource","reduced","match","re","m","exec","exact","expression","comma","negative","negative_expression","first","intermediate_or_fraction","second","let","c","dash","other_constant","intermediate","frac","ufirst","usecond","numerator","denominator","simple","sub_expr","sup_expr","sub","sup","matrix","bracketed_expression","binary","constant","text","unary","negative_simple","left_bracket","contents","matrix_contents","contents_tex","rows","map","r","join","is_array","leftright","row_length","undefined","column_desc","lb","cells","columns","cell","matrix_cell","row_column_desc","lvert","rvert","l","position","quoted","textfn","atex","lb1","rb1","op","arg1","arg2","u","sstex","barg","arg","argtex","raw","greek","name","number","arbitrary_constant","re_greek","RegExp","re_number","sym","notm","spos"],"mappings":"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"}