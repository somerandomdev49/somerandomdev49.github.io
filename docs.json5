{
    "Graphing Tool": {
        "conditional": {
            type: "func",
            docs: {
                "Syntax": {
                    type: "code",
                    value: "conditional(...args)"
                },
                "Arguments": {
                    type: "ul",
                    value: "<li><code>...args</code> - value + condition pairs</li>"
                },
                "Return Value": {
                    type: "code",
                    value: "a function that takes one argument."
                },
                "Brief": {
                    type: "p",
                    value:
"Returns a function that iterates through all of the\
<code>args</code> and takes the first value of which\
the condition was satisfied with the given value."
                },
                "Example": {
                    type: "div",
                    value:
"<pre>conditional(\
\t[ x =&gt; - x - 7, x => x &lt; -5 ],\
\t[ x =&gt; -2 * x ** 2 - 12 * x - 12, _ =&gt; true ]\
);</pre>\
Returns <code>-x - 7</code> if <code>x is &lt; -5</code>\
and <code>-2 * x ** 2 - 12 * x - 12</code> otherwise."
                }
            }
        },
        "Q": {
            type: "func",
            docs: {
                "Syntax": {
                    type: "code",
                    value: "Q(q)"
                },
                "Arguments": {
                    type: "ul",
                    value: "<li><code>q</code> - html query</li>"
                },
                "Return Value": {
                    type: "span",
                    value: "An element that satisfies the query, null if there are none."
                },
                "Brief": {
                    type: "p",
                    value:
"This is an alias to <code>document.querySelector</code>."
                },
                "Example": {
                    type: "div",
                    value: "<pre>Q(\"#special\").innerText = \"Hello, World!\";</pre>"
                }
            }
        }
    },
    "Fictional": {
        "MindReader": {
            type: "class",
            docs: {
                "Brief": {
                    type: "p",
                    value: "Hello, World!"
                },
                "What??": {
                    type: "p",
                    value: "This exists for documentation generator testing."
                }
            }
        }
    }
}
