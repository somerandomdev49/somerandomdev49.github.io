import { __decorate } from "tslib";
import { LitElement, html, customElement, property, css } from "lit-element";
import '@material/mwc-dialog';
import '@material/mwc-button';
export class MyElement extends HTMLElement {
    connectedCallback() {
        const shadowRoot = this.attachShadow({ mode: 'open' });
        shadowRoot.innerHTML = `
    <div>Hello World</div>
    <slot name="top"></slot>
    <slot></slot>
    <slot name="bottom"></slot>`;
    }
    disconnectedCallback() { }
    constructor() {
        super();
    }
    attributeChangedCallback() { }
}
let MyInnerElement = class MyInnerElement extends LitElement {
    constructor() {
        super(...arguments);
        this.open = true;
    }
    render() {
        return html `
      <mwc-dialog .open=${this.open} @closed=${this.onClose}>
        <div>
          would you like to export?
        </div>
        <mwc-button slot="primaryAction" label="yes" dialogAction="yes_action"></mwc-button>
        <mwc-button slot="secondaryAction" label="no" dialogAction="no_action"></mwc-button>
      </mwc-dialog>`;
    }
    onClose(ev) {
        console.log(ev.detail.action);
    }
};
MyInnerElement.styles = css `
    #hello {
      color: blue;
    }`;
__decorate([
    property()
], MyInnerElement.prototype, "open", void 0);
MyInnerElement = __decorate([
    customElement('my-inner-element')
], MyInnerElement);
export { MyInnerElement };
let MyLitElement = class MyLitElement extends LitElement {
    constructor() {
        super(...arguments);
        this.name = 'default';
    }
    render() {
        return html `
      <my-inner-element @custom=${this.onCustom} name=${this.uppercaseName(this.name)}></my-inner-element>`;
    }
    uppercaseName(name) {
        return name.toUpperCase();
    }
    onCustom(ev) {
        this.name = ev.detail.name;
    }
};
MyLitElement.styles = css `
    #hello {
      color: red;
    }`;
__decorate([
    property()
], MyLitElement.prototype, "name", void 0);
MyLitElement = __decorate([
    customElement('my-lit-element')
], MyLitElement);
export { MyLitElement };
//# sourceMappingURL=test.js.map