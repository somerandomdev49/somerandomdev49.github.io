{"version":3,"file":"test.js","sourceRoot":"","sources":["src/test.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,aAAa,CAAC;AAC7E,OAAO,sBAAsB,CAAC;AAC9B,OAAO,sBAAsB,CAAC;AAE9B,MAAM,OAAO,SAAU,SAAQ,WAAW;IACxC,iBAAiB;QACf,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;QAErD,UAAU,CAAC,SAAS,GAAG;;;;gCAIK,CAAA;IAC9B,CAAC;IACD,oBAAoB,KAAI,CAAC;IACzB;QACE,KAAK,EAAE,CAAC;IACV,CAAC;IACD,wBAAwB,KAAI,CAAC;CAC9B;AAGD,IAAa,cAAc,GAA3B,MAAa,cAAe,SAAQ,UAAU;IAA9C;;QACc,SAAI,GAAG,IAAI,CAAC;IAqB1B,CAAC;IAdC,MAAM;QACJ,OAAO,IAAI,CAAA;0BACW,IAAI,CAAC,IAAI,YAAY,IAAI,CAAC,OAAO;;;;;;oBAMvC,CAAA;IAClB,CAAC;IAED,OAAO,CAAC,EAAiC;QACvC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;CACF,CAAA;AAnBQ,qBAAM,GAAG,GAAG,CAAA;;;MAGf,CAAC;AALO;IAAX,QAAQ,EAAE;4CAAa;AADb,cAAc;IAD1B,aAAa,CAAC,kBAAkB,CAAC;GACrB,cAAc,CAsB1B;SAtBY,cAAc;AAyB3B,IAAa,YAAY,GAAzB,MAAa,YAAa,SAAQ,UAAU;IAA5C;;QACc,SAAI,GAAG,SAAS,CAAC;IAkB/B,CAAC;IAZC,MAAM;QACJ,OAAO,IAAI,CAAA;kCACmB,IAAI,CAAC,QAAQ,SAAS,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAA;IACzG,CAAC;IAED,aAAa,CAAC,IAAY;QACxB,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;IAC5B,CAAC;IAED,QAAQ,CAAC,EAA8B;QACrC,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC;IAC7B,CAAC;CACF,CAAA;AAjBQ,mBAAM,GAAG,GAAG,CAAA;;;MAGf,CAAC;AAJO;IAAX,QAAQ,EAAE;0CAAkB;AADlB,YAAY;IADxB,aAAa,CAAC,gBAAgB,CAAC;GACnB,YAAY,CAmBxB;SAnBY,YAAY","sourcesContent":["import { LitElement, html, customElement, property, css } from \"lit-element\";\nimport '@material/mwc-dialog';\nimport '@material/mwc-button';\n\nexport class MyElement extends HTMLElement {\n  connectedCallback() {\n    const shadowRoot = this.attachShadow({mode: 'open'});\n\n    shadowRoot.innerHTML = `\n    <div>Hello World</div>\n    <slot name=\"top\"></slot>\n    <slot></slot>\n    <slot name=\"bottom\"></slot>`\n  }\n  disconnectedCallback() {}\n  constructor() {\n    super();\n  }\n  attributeChangedCallback() {}\n}\n\n@customElement('my-inner-element')\nexport class MyInnerElement extends LitElement {\n  @property() open = true;\n\n  static styles = css`\n    #hello {\n      color: blue;\n    }`;\n\n  render() {\n    return html`\n      <mwc-dialog .open=${this.open} @closed=${this.onClose}>\n        <div>\n          would you like to export?\n        </div>\n        <mwc-button slot=\"primaryAction\" label=\"yes\" dialogAction=\"yes_action\"></mwc-button>\n        <mwc-button slot=\"secondaryAction\" label=\"no\" dialogAction=\"no_action\"></mwc-button>\n      </mwc-dialog>`\n  }\n\n  onClose(ev: CustomEvent<{action: string}>) {\n    console.log(ev.detail.action);\n  }\n}\n\n@customElement('my-lit-element')\nexport class MyLitElement extends LitElement {\n  @property() name = 'default';\n  static styles = css`\n    #hello {\n      color: red;\n    }`;\n\n  render() {\n    return html`\n      <my-inner-element @custom=${this.onCustom} name=${this.uppercaseName(this.name)}></my-inner-element>`\n  }\n\n  uppercaseName(name: string): string {\n    return name.toUpperCase();\n  }\n\n  onCustom(ev:CustomEvent<{name: string}>) {\n    this.name = ev.detail.name;\n  }\n}"]}